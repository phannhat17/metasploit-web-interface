'use client';

import { useEffect, useState } from 'react';
import axios from 'axios';
import { useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { toast } from 'sonner';

const ModuleOptions: React.FC = () => {
  const searchParams = useSearchParams();
  const moduleType = searchParams.get('type');
  const moduleName = searchParams.get('name');
  const [options, setOptions] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    const fetchOptions = async () => {
      setLoading(true);
      setError('');

      try {
        const response = await axios.get(`http://127.0.0.1:5000/exploit/options?type=${moduleType}&name=${moduleName}`);
        setOptions(response.data);
      } catch (err: any) {
        setError(err.response?.data?.error || 'Error occurred');
      }
      setLoading(false);
    };

    fetchOptions();
  }, [moduleType, moduleName]);

  const handleRunModule = async (event: React.FormEvent) => {
    event.preventDefault();
    setLoading(true);
    setError('');

    const formData = new FormData(event.target as HTMLFormElement);

    try {
      await axios.post('http://127.0.0.1:5000/exploit/run', formData);
      toast.success('Module executed successfully');
    } catch (err: any) {
      toast.error(err.response?.data?.error || 'Error occurred');
    }
    setLoading(false);
  };

  const renderInput = (name: string, value: any) => {
    return (
      <div key={name} className="mb-4">
        <Label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
          {name}
        </Label>
        <Input
          type="text"
          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          id={name}
          name={name}
          defaultValue={value}
        />
      </div>
    );
  };

  const renderCheckbox = (name: string, value: boolean) => {
    return (
      <div key={name} className="mb-4 flex items-center justify-between">
        <Label htmlFor={name} className="text-sm font-medium text-gray-700">
          {name}
        </Label>
        <Checkbox
          checked={value}
          onCheckedChange={(checked) => {
            setOptions((prevOptions: any) => ({
              ...prevOptions,
              current_set: {
                ...prevOptions.current_set,
                [name]: checked,
              },
            }));
            const element = document.getElementById(name) as HTMLInputElement;
            if (element) {
              element.value = String(checked);
            }
          }}
          id={name}
          name={name}
        />
      </div>
    );
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <Card className="w-full max-w-4xl shadow-lg">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center mb-4">Module Options</CardTitle>
        </CardHeader>
        <CardContent>
          {loading && <p className="text-center">Loading...</p>}
          {error && <p className="text-center text-red-500">{error}</p>}
          {options && (
            <form onSubmit={handleRunModule} className="space-y-8">
              <div>
                <h2 className="text-xl font-semibold mb-4">Current Set</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {Object.entries(options.current_set)
                    .filter(([_, value]) => typeof value !== 'boolean')
                    .map(([option, value]) => renderInput(option, value))}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  {Object.entries(options.current_set)
                    .filter(([_, value]) => typeof value === 'boolean')
                    .map(([option, value]) => renderCheckbox(option, value))}
                </div>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-4">Missing Required</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {options.missing_required.map((option: string) => renderInput(option, ''))}
                </div>
              </div>
              <div className="mt-8 flex justify-end">
                <Button type="submit" className="py-2 px-6 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  Run Module
                </Button>
              </div>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ModuleOptions;
