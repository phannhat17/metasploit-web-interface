from flask import Blueprint, jsonify, request, render_template
import subprocess
import os
import datetime
from .msf_client import client
import time

# Initialize the Blueprint
exploit_bp = Blueprint('exploit', __name__)
exploit_module = None

@exploit_bp.route('/options', methods=["GET"])
def method_info():
    global exploit_module 
    module_type = request.args.get('type')
    module_name = request.args.get('name')

    exploit_module = client.modules.use(module_type, module_name)

    options = {"all_options": exploit_module.options, "missing_required": exploit_module.missing_required, 'required': exploit_module.required, "current_set": exploit_module.runoptions }

    return jsonify(options)
        # return render_template('options.html', options=options)

@exploit_bp.route('/run', methods=["POST"])
def submit_options():
    global exploit_module  # Use the global exploit_module variable
    if exploit_module is None:
        return jsonify({"error": "No module selected"}), 400
    for option, value in request.form.items():
        if value.isdigit():
            value = int(value)
        elif value.lower() == 'true':
            value = True
        elif value.lower() == 'false':
            value = False
        exploit_module[option] = value
    if exploit_module.payloads:
        payload_m = exploit_module.payloads[0]
        execution_result = exploit_module.execute(payload=payload_m)
    else:
        execution_result = exploit_module.execute()
    
    time.sleep(6)
    if len(client.sessions.list) >  0:
        sessions = client.sessions.list
        for session_id in sessions:
            if  str(sessions[session_id]['exploit_uuid']) == str(execution_result["uuid"]):
                return jsonify({"success": "Exploit successful!"})
    else:
        return jsonify({"error": "Failed to exploit!"})
